// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.0
// source: proto/code_aster.proto

package _go

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Physics int32

const (
	Physics_Mechanics Physics = 0
	Physics_Thermal   Physics = 1
	Physics_Acoustic  Physics = 2
)

// Enum value maps for Physics.
var (
	Physics_name = map[int32]string{
		0: "Mechanics",
		1: "Thermal",
		2: "Acoustic",
	}
	Physics_value = map[string]int32{
		"Mechanics": 0,
		"Thermal":   1,
		"Acoustic":  2,
	}
)

func (x Physics) Enum() *Physics {
	p := new(Physics)
	*p = x
	return p
}

func (x Physics) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Physics) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_code_aster_proto_enumTypes[0].Descriptor()
}

func (Physics) Type() protoreflect.EnumType {
	return &file_proto_code_aster_proto_enumTypes[0]
}

func (x Physics) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Physics.Descriptor instead.
func (Physics) EnumDescriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{0}
}

type Modelings int32

const (
	Modelings_Axisymmetrical                  Modelings = 0
	Modelings_DKT                             Modelings = 6
	Modelings_DKTG                            Modelings = 7
	Modelings_Planar                          Modelings = 3
	Modelings_PlanarBar                       Modelings = 8
	Modelings_PlaneStrain                     Modelings = 4
	Modelings_PlaneStress                     Modelings = 5
	Modelings_Tridimensional                  Modelings = 1
	Modelings_TridimensionalAbsorbingBoundary Modelings = 2
)

// Enum value maps for Modelings.
var (
	Modelings_name = map[int32]string{
		0: "Axisymmetrical",
		6: "DKT",
		7: "DKTG",
		3: "Planar",
		8: "PlanarBar",
		4: "PlaneStrain",
		5: "PlaneStress",
		1: "Tridimensional",
		2: "TridimensionalAbsorbingBoundary",
	}
	Modelings_value = map[string]int32{
		"Axisymmetrical":                  0,
		"DKT":                             6,
		"DKTG":                            7,
		"Planar":                          3,
		"PlanarBar":                       8,
		"PlaneStrain":                     4,
		"PlaneStress":                     5,
		"Tridimensional":                  1,
		"TridimensionalAbsorbingBoundary": 2,
	}
)

func (x Modelings) Enum() *Modelings {
	p := new(Modelings)
	*p = x
	return p
}

func (x Modelings) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modelings) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_code_aster_proto_enumTypes[1].Descriptor()
}

func (Modelings) Type() protoreflect.EnumType {
	return &file_proto_code_aster_proto_enumTypes[1]
}

func (x Modelings) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modelings.Descriptor instead.
func (Modelings) EnumDescriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{1}
}

type LogLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line string `protobuf:"bytes,1,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *LogLine) Reset() {
	*x = LogLine{}
	mi := &file_proto_code_aster_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogLine) ProtoMessage() {}

func (x *LogLine) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogLine.ProtoReflect.Descriptor instead.
func (*LogLine) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{0}
}

func (x *LogLine) GetLine() string {
	if x != nil {
		return x.Line
	}
	return ""
}

type ElementaryMatrices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Matrices []*ElementaryMatrix `protobuf:"bytes,1,rep,name=matrices,proto3" json:"matrices,omitempty"`
}

func (x *ElementaryMatrices) Reset() {
	*x = ElementaryMatrices{}
	mi := &file_proto_code_aster_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementaryMatrices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementaryMatrices) ProtoMessage() {}

func (x *ElementaryMatrices) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementaryMatrices.ProtoReflect.Descriptor instead.
func (*ElementaryMatrices) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{1}
}

func (x *ElementaryMatrices) GetMatrices() []*ElementaryMatrix {
	if x != nil {
		return x.Matrices
	}
	return nil
}

type AssemblyMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AssemblyMatrix) Reset() {
	*x = AssemblyMatrix{}
	mi := &file_proto_code_aster_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AssemblyMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyMatrix) ProtoMessage() {}

func (x *AssemblyMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyMatrix.ProtoReflect.Descriptor instead.
func (*AssemblyMatrix) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{2}
}

func (x *AssemblyMatrix) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NeumannForcesParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeCurr float64 `protobuf:"fixed64,1,opt,name=time_curr,json=timeCurr,proto3" json:"time_curr,omitempty"`
	TimeStep float64 `protobuf:"fixed64,2,opt,name=time_step,json=timeStep,proto3" json:"time_step,omitempty"`
	Theta    float64 `protobuf:"fixed64,3,opt,name=theta,proto3" json:"theta,omitempty"`
	Mode     int64   `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *NeumannForcesParams) Reset() {
	*x = NeumannForcesParams{}
	mi := &file_proto_code_aster_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeumannForcesParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeumannForcesParams) ProtoMessage() {}

func (x *NeumannForcesParams) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeumannForcesParams.ProtoReflect.Descriptor instead.
func (*NeumannForcesParams) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{3}
}

func (x *NeumannForcesParams) GetTimeCurr() float64 {
	if x != nil {
		return x.TimeCurr
	}
	return 0
}

func (x *NeumannForcesParams) GetTimeStep() float64 {
	if x != nil {
		return x.TimeStep
	}
	return 0
}

func (x *NeumannForcesParams) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *NeumannForcesParams) GetMode() int64 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type ElementaryMatrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ElementaryMatrix) Reset() {
	*x = ElementaryMatrix{}
	mi := &file_proto_code_aster_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ElementaryMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementaryMatrix) ProtoMessage() {}

func (x *ElementaryMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementaryMatrix.ProtoReflect.Descriptor instead.
func (*ElementaryMatrix) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{4}
}

func (x *ElementaryMatrix) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FieldOnNodesId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *FieldOnNodesId) Reset() {
	*x = FieldOnNodesId{}
	mi := &file_proto_code_aster_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldOnNodesId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOnNodesId) ProtoMessage() {}

func (x *FieldOnNodesId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOnNodesId.ProtoReflect.Descriptor instead.
func (*FieldOnNodesId) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{5}
}

func (x *FieldOnNodesId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type MechanicalLoadReal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MechanicalLoadReal) Reset() {
	*x = MechanicalLoadReal{}
	mi := &file_proto_code_aster_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MechanicalLoadReal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MechanicalLoadReal) ProtoMessage() {}

func (x *MechanicalLoadReal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MechanicalLoadReal.ProtoReflect.Descriptor instead.
func (*MechanicalLoadReal) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{6}
}

func (x *MechanicalLoadReal) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PressureRealWithLoadId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pressure *PressureReal `protobuf:"bytes,2,opt,name=pressure,proto3" json:"pressure,omitempty"`
}

func (x *PressureRealWithLoadId) Reset() {
	*x = PressureRealWithLoadId{}
	mi := &file_proto_code_aster_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PressureRealWithLoadId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PressureRealWithLoadId) ProtoMessage() {}

func (x *PressureRealWithLoadId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PressureRealWithLoadId.ProtoReflect.Descriptor instead.
func (*PressureRealWithLoadId) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{7}
}

func (x *PressureRealWithLoadId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PressureRealWithLoadId) GetPressure() *PressureReal {
	if x != nil {
		return x.Pressure
	}
	return nil
}

type PressureReal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pres        float64 `protobuf:"fixed64,1,opt,name=Pres,proto3" json:"Pres,omitempty"`
	NameOfGroup string  `protobuf:"bytes,2,opt,name=nameOfGroup,proto3" json:"nameOfGroup,omitempty"`
}

func (x *PressureReal) Reset() {
	*x = PressureReal{}
	mi := &file_proto_code_aster_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PressureReal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PressureReal) ProtoMessage() {}

func (x *PressureReal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PressureReal.ProtoReflect.Descriptor instead.
func (*PressureReal) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{8}
}

func (x *PressureReal) GetPres() float64 {
	if x != nil {
		return x.Pres
	}
	return 0
}

func (x *PressureReal) GetNameOfGroup() string {
	if x != nil {
		return x.NameOfGroup
	}
	return ""
}

type DisplacementRealWithLoadId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Displacement *DisplacementReal `protobuf:"bytes,2,opt,name=displacement,proto3" json:"displacement,omitempty"`
}

func (x *DisplacementRealWithLoadId) Reset() {
	*x = DisplacementRealWithLoadId{}
	mi := &file_proto_code_aster_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplacementRealWithLoadId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplacementRealWithLoadId) ProtoMessage() {}

func (x *DisplacementRealWithLoadId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplacementRealWithLoadId.ProtoReflect.Descriptor instead.
func (*DisplacementRealWithLoadId) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{9}
}

func (x *DisplacementRealWithLoadId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DisplacementRealWithLoadId) GetDisplacement() *DisplacementReal {
	if x != nil {
		return x.Displacement
	}
	return nil
}

type DisplacementReal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dx          float64 `protobuf:"fixed64,1,opt,name=Dx,proto3" json:"Dx,omitempty"`
	Dy          float64 `protobuf:"fixed64,2,opt,name=Dy,proto3" json:"Dy,omitempty"`
	Dz          float64 `protobuf:"fixed64,3,opt,name=Dz,proto3" json:"Dz,omitempty"`
	NameOfGroup string  `protobuf:"bytes,4,opt,name=nameOfGroup,proto3" json:"nameOfGroup,omitempty"`
}

func (x *DisplacementReal) Reset() {
	*x = DisplacementReal{}
	mi := &file_proto_code_aster_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DisplacementReal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplacementReal) ProtoMessage() {}

func (x *DisplacementReal) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplacementReal.ProtoReflect.Descriptor instead.
func (*DisplacementReal) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{10}
}

func (x *DisplacementReal) GetDx() float64 {
	if x != nil {
		return x.Dx
	}
	return 0
}

func (x *DisplacementReal) GetDy() float64 {
	if x != nil {
		return x.Dy
	}
	return 0
}

func (x *DisplacementReal) GetDz() float64 {
	if x != nil {
		return x.Dz
	}
	return 0
}

func (x *DisplacementReal) GetNameOfGroup() string {
	if x != nil {
		return x.NameOfGroup
	}
	return ""
}

type MedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filename string `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Content  []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *MedFile) Reset() {
	*x = MedFile{}
	mi := &file_proto_code_aster_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedFile) ProtoMessage() {}

func (x *MedFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedFile.ProtoReflect.Descriptor instead.
func (*MedFile) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{11}
}

func (x *MedFile) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *MedFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Modeling struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Physics   Physics   `protobuf:"varint,1,opt,name=physics,proto3,enum=Physics" json:"physics,omitempty"`
	Modelings Modelings `protobuf:"varint,2,opt,name=modelings,proto3,enum=Modelings" json:"modelings,omitempty"`
}

func (x *Modeling) Reset() {
	*x = Modeling{}
	mi := &file_proto_code_aster_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Modeling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Modeling) ProtoMessage() {}

func (x *Modeling) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Modeling.ProtoReflect.Descriptor instead.
func (*Modeling) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{12}
}

func (x *Modeling) GetPhysics() Physics {
	if x != nil {
		return x.Physics
	}
	return Physics_Mechanics
}

func (x *Modeling) GetModelings() Modelings {
	if x != nil {
		return x.Modelings
	}
	return Modelings_Axisymmetrical
}

type Material struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elas      *Elas      `protobuf:"bytes,1,opt,name=elas,proto3" json:"elas,omitempty"`
	Viscochab *ViscoChab `protobuf:"bytes,2,opt,name=viscochab,proto3" json:"viscochab,omitempty"`
}

func (x *Material) Reset() {
	*x = Material{}
	mi := &file_proto_code_aster_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Material) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Material) ProtoMessage() {}

func (x *Material) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Material.ProtoReflect.Descriptor instead.
func (*Material) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{13}
}

func (x *Material) GetElas() *Elas {
	if x != nil {
		return x.Elas
	}
	return nil
}

func (x *Material) GetViscochab() *ViscoChab {
	if x != nil {
		return x.Viscochab
	}
	return nil
}

type Elas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E  float64 `protobuf:"fixed64,1,opt,name=e,proto3" json:"e,omitempty"`
	Nu float64 `protobuf:"fixed64,2,opt,name=nu,proto3" json:"nu,omitempty"`
}

func (x *Elas) Reset() {
	*x = Elas{}
	mi := &file_proto_code_aster_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Elas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Elas) ProtoMessage() {}

func (x *Elas) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Elas.ProtoReflect.Descriptor instead.
func (*Elas) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{14}
}

func (x *Elas) GetE() float64 {
	if x != nil {
		return x.E
	}
	return 0
}

func (x *Elas) GetNu() float64 {
	if x != nil {
		return x.Nu
	}
	return 0
}

type ViscoChab struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	K    float64 `protobuf:"fixed64,1,opt,name=K,proto3" json:"K,omitempty"`
	B    float64 `protobuf:"fixed64,2,opt,name=B,proto3" json:"B,omitempty"`
	MU   float64 `protobuf:"fixed64,3,opt,name=MU,proto3" json:"MU,omitempty"`
	Q_M  float64 `protobuf:"fixed64,4,opt,name=Q_M,json=QM,proto3" json:"Q_M,omitempty"`
	Q_0  float64 `protobuf:"fixed64,5,opt,name=Q_0,json=Q0,proto3" json:"Q_0,omitempty"`
	C1   float64 `protobuf:"fixed64,6,opt,name=C1,proto3" json:"C1,omitempty"`
	C2   float64 `protobuf:"fixed64,7,opt,name=C2,proto3" json:"C2,omitempty"`
	G1_0 float64 `protobuf:"fixed64,8,opt,name=G1_0,json=G10,proto3" json:"G1_0,omitempty"`
	G2_0 float64 `protobuf:"fixed64,9,opt,name=G2_0,json=G20,proto3" json:"G2_0,omitempty"`
	K_0  float64 `protobuf:"fixed64,10,opt,name=K_0,json=K0,proto3" json:"K_0,omitempty"`
	N    float64 `protobuf:"fixed64,11,opt,name=N,proto3" json:"N,omitempty"`
	A_K  float64 `protobuf:"fixed64,12,opt,name=A_K,json=AK,proto3" json:"A_K,omitempty"`
}

func (x *ViscoChab) Reset() {
	*x = ViscoChab{}
	mi := &file_proto_code_aster_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViscoChab) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViscoChab) ProtoMessage() {}

func (x *ViscoChab) ProtoReflect() protoreflect.Message {
	mi := &file_proto_code_aster_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViscoChab.ProtoReflect.Descriptor instead.
func (*ViscoChab) Descriptor() ([]byte, []int) {
	return file_proto_code_aster_proto_rawDescGZIP(), []int{15}
}

func (x *ViscoChab) GetK() float64 {
	if x != nil {
		return x.K
	}
	return 0
}

func (x *ViscoChab) GetB() float64 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *ViscoChab) GetMU() float64 {
	if x != nil {
		return x.MU
	}
	return 0
}

func (x *ViscoChab) GetQ_M() float64 {
	if x != nil {
		return x.Q_M
	}
	return 0
}

func (x *ViscoChab) GetQ_0() float64 {
	if x != nil {
		return x.Q_0
	}
	return 0
}

func (x *ViscoChab) GetC1() float64 {
	if x != nil {
		return x.C1
	}
	return 0
}

func (x *ViscoChab) GetC2() float64 {
	if x != nil {
		return x.C2
	}
	return 0
}

func (x *ViscoChab) GetG1_0() float64 {
	if x != nil {
		return x.G1_0
	}
	return 0
}

func (x *ViscoChab) GetG2_0() float64 {
	if x != nil {
		return x.G2_0
	}
	return 0
}

func (x *ViscoChab) GetK_0() float64 {
	if x != nil {
		return x.K_0
	}
	return 0
}

func (x *ViscoChab) GetN() float64 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ViscoChab) GetA_K() float64 {
	if x != nil {
		return x.A_K
	}
	return 0
}

var File_proto_code_aster_proto protoreflect.FileDescriptor

var file_proto_code_aster_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0x43, 0x0a, 0x12, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x61,
	0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x52,
	0x08, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0x20, 0x0a, 0x0e, 0x41, 0x73, 0x73,
	0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x13, 0x4e,
	0x65, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x75, 0x72, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x65, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x65, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x20, 0x0a, 0x0e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x24, 0x0a, 0x12,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x53, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x08,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x52, 0x08, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x22, 0x44, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73, 0x73,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x50, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x63, 0x0a,
	0x1a, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x61, 0x6c, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x64, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x44, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x44, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x44, 0x7a, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x44, 0x7a, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x4f, 0x66, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x3f, 0x0a, 0x07, 0x4d, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x58, 0x0a, 0x08, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73,
	0x52, 0x07, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x19, 0x0a, 0x04, 0x65, 0x6c, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e,
	0x45, 0x6c, 0x61, 0x73, 0x52, 0x04, 0x65, 0x6c, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x69,
	0x73, 0x63, 0x6f, 0x63, 0x68, 0x61, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x56, 0x69, 0x73, 0x63, 0x6f, 0x43, 0x68, 0x61, 0x62, 0x52, 0x09, 0x76, 0x69, 0x73, 0x63, 0x6f,
	0x63, 0x68, 0x61, 0x62, 0x22, 0x24, 0x0a, 0x04, 0x45, 0x6c, 0x61, 0x73, 0x12, 0x0c, 0x0a, 0x01,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x6e, 0x75, 0x22, 0xcf, 0x01, 0x0a, 0x09, 0x56,
	0x69, 0x73, 0x63, 0x6f, 0x43, 0x68, 0x61, 0x62, 0x12, 0x0c, 0x0a, 0x01, 0x4b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x01, 0x4b, 0x12, 0x0c, 0x0a, 0x01, 0x42, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x4d, 0x55, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x02, 0x4d, 0x55, 0x12, 0x0f, 0x0a, 0x03, 0x51, 0x5f, 0x4d, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x51, 0x4d, 0x12, 0x0f, 0x0a, 0x03, 0x51, 0x5f, 0x30, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x51, 0x30, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x31, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x43, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x43, 0x32, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x02, 0x43, 0x32, 0x12, 0x11, 0x0a, 0x04, 0x47, 0x31, 0x5f, 0x30, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x47, 0x31, 0x30, 0x12, 0x11, 0x0a, 0x04, 0x47, 0x32, 0x5f,
	0x30, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x47, 0x32, 0x30, 0x12, 0x0f, 0x0a, 0x03,
	0x4b, 0x5f, 0x30, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x4b, 0x30, 0x12, 0x0c, 0x0a,
	0x01, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x4e, 0x12, 0x0f, 0x0a, 0x03, 0x41,
	0x5f, 0x4b, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x41, 0x4b, 0x2a, 0x33, 0x0a, 0x07,
	0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65, 0x63, 0x68, 0x61,
	0x6e, 0x69, 0x63, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x6f, 0x75, 0x73, 0x74, 0x69, 0x63, 0x10,
	0x02, 0x2a, 0xa8, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x41, 0x78, 0x69, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x54, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04,
	0x44, 0x4b, 0x54, 0x47, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x6e, 0x61, 0x72,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x61, 0x72, 0x42, 0x61, 0x72, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65, 0x73,
	0x73, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x72, 0x69, 0x64, 0x69,
	0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x41, 0x62, 0x73, 0x6f, 0x72, 0x62, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x10, 0x02, 0x32, 0xf6, 0x06, 0x0a,
	0x0a, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x04, 0x69,
	0x6e, 0x69, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4c,
	0x6f, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x08, 0x2e, 0x4c, 0x6f, 0x67,
	0x4c, 0x69, 0x6e, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x04, 0x4d, 0x65, 0x73, 0x68,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x61, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x17, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13, 0x44, 0x69, 0x73,
	0x63, 0x72, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x4f, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x4d, 0x75, 0x6d, 0x70,
	0x73, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x39, 0x0a, 0x04, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x31, 0x0a,
	0x0b, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x08, 0x2e, 0x4d,
	0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x32, 0x7c, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x38, 0x0a, 0x11, 0x61, 0x64, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x09,
	0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x69, 0x6e, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x84,
	0x01, 0x0a, 0x0d, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x38, 0x0a, 0x11, 0x61, 0x64, 0x64, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4f,
	0x6e, 0x4d, 0x65, 0x73, 0x68, 0x12, 0x09, 0x2e, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x94, 0x01, 0x0a, 0x17, 0x49, 0x6d, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61, 0x6c,
	0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x13, 0x2e,
	0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65,
	0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x90, 0x01, 0x0a,
	0x17, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x50, 0x72, 0x65, 0x73,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x73, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x05, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x12, 0x13, 0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32,
	0x94, 0x01, 0x0a, 0x0f, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x62,
	0x6c, 0x65, 0x6d, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x13,
	0x2e, 0x4d, 0x65, 0x63, 0x68, 0x61, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x6f, 0x61, 0x64, 0x52,
	0x65, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x4f, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xe2, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x73, 0x63, 0x72,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x10, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x14, 0x2e, 0x4e, 0x65, 0x75, 0x6d, 0x61, 0x6e, 0x6e, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x0f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x64, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x18, 0x67,
	0x65, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x74, 0x69, 0x66, 0x66, 0x6e, 0x65, 0x73,
	0x73, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x11, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x44, 0x75, 0x61, 0x6c, 0x53,
	0x74, 0x69, 0x66, 0x66, 0x6e, 0x65, 0x73, 0x73, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x22, 0x00, 0x32, 0x51, 0x0a, 0x0c, 0x44,
	0x4f, 0x46, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x10, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x13, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x63, 0x65, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xe7,
	0x01, 0x0a, 0x1e, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x61,
	0x6c, 0x12, 0x42, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x11, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x44, 0x4f, 0x46, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x08, 0x61, 0x73,
	0x73, 0x65, 0x6d, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x79, 0x0a, 0x0b, 0x4d, 0x75, 0x6d, 0x70,
	0x73, 0x53, 0x6f, 0x6c, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12,
	0x0f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49, 0x64,
	0x1a, 0x0f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x49,
	0x64, 0x22, 0x00, 0x32, 0x3b, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x0f, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x49, 0x64, 0x1a, 0x08, 0x2e, 0x4d, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_code_aster_proto_rawDescOnce sync.Once
	file_proto_code_aster_proto_rawDescData = file_proto_code_aster_proto_rawDesc
)

func file_proto_code_aster_proto_rawDescGZIP() []byte {
	file_proto_code_aster_proto_rawDescOnce.Do(func() {
		file_proto_code_aster_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_code_aster_proto_rawDescData)
	})
	return file_proto_code_aster_proto_rawDescData
}

var file_proto_code_aster_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_code_aster_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_proto_code_aster_proto_goTypes = []any{
	(Physics)(0),                       // 0: Physics
	(Modelings)(0),                     // 1: Modelings
	(*LogLine)(nil),                    // 2: LogLine
	(*ElementaryMatrices)(nil),         // 3: ElementaryMatrices
	(*AssemblyMatrix)(nil),             // 4: AssemblyMatrix
	(*NeumannForcesParams)(nil),        // 5: NeumannForcesParams
	(*ElementaryMatrix)(nil),           // 6: ElementaryMatrix
	(*FieldOnNodesId)(nil),             // 7: FieldOnNodesId
	(*MechanicalLoadReal)(nil),         // 8: MechanicalLoadReal
	(*PressureRealWithLoadId)(nil),     // 9: PressureRealWithLoadId
	(*PressureReal)(nil),               // 10: PressureReal
	(*DisplacementRealWithLoadId)(nil), // 11: DisplacementRealWithLoadId
	(*DisplacementReal)(nil),           // 12: DisplacementReal
	(*MedFile)(nil),                    // 13: MedFile
	(*Modeling)(nil),                   // 14: Modeling
	(*Material)(nil),                   // 15: Material
	(*Elas)(nil),                       // 16: Elas
	(*ViscoChab)(nil),                  // 17: ViscoChab
	(*emptypb.Empty)(nil),              // 18: google.protobuf.Empty
}
var file_proto_code_aster_proto_depIdxs = []int32{
	6,  // 0: ElementaryMatrices.matrices:type_name -> ElementaryMatrix
	10, // 1: PressureRealWithLoadId.pressure:type_name -> PressureReal
	12, // 2: DisplacementRealWithLoadId.displacement:type_name -> DisplacementReal
	0,  // 3: Modeling.physics:type_name -> Physics
	1,  // 4: Modeling.modelings:type_name -> Modelings
	16, // 5: Material.elas:type_name -> Elas
	17, // 6: Material.viscochab:type_name -> ViscoChab
	18, // 7: code_aster.init:input_type -> google.protobuf.Empty
	18, // 8: code_aster.StreamLog:input_type -> google.protobuf.Empty
	18, // 9: code_aster.Mesh:input_type -> google.protobuf.Empty
	18, // 10: code_aster.Model:input_type -> google.protobuf.Empty
	18, // 11: code_aster.MaterialField:input_type -> google.protobuf.Empty
	18, // 12: code_aster.ImposedDisplacementReal:input_type -> google.protobuf.Empty
	18, // 13: code_aster.DistributedPressureReal:input_type -> google.protobuf.Empty
	18, // 14: code_aster.PhysicalProblem:input_type -> google.protobuf.Empty
	18, // 15: code_aster.DiscreteComputation:input_type -> google.protobuf.Empty
	18, // 16: code_aster.DOFNumbering:input_type -> google.protobuf.Empty
	18, // 17: code_aster.AssemblyMatrixDisplacementReal:input_type -> google.protobuf.Empty
	18, // 18: code_aster.MumpsSolver:input_type -> google.protobuf.Empty
	18, // 19: code_aster.SimpleFieldOnNodesReal:input_type -> google.protobuf.Empty
	13, // 20: Mesh.readMedFile:input_type -> MedFile
	14, // 21: Model.addModelingOnMesh:input_type -> Modeling
	18, // 22: Model.build:input_type -> google.protobuf.Empty
	15, // 23: MaterialField.addMaterialOnMesh:input_type -> Material
	18, // 24: MaterialField.build:input_type -> google.protobuf.Empty
	11, // 25: ImposedDisplacementReal.setValue:input_type -> DisplacementRealWithLoadId
	8,  // 26: ImposedDisplacementReal.build:input_type -> MechanicalLoadReal
	9,  // 27: DistributedPressureReal.setValue:input_type -> PressureRealWithLoadId
	8,  // 28: DistributedPressureReal.build:input_type -> MechanicalLoadReal
	8,  // 29: PhysicalProblem.addLoad:input_type -> MechanicalLoadReal
	18, // 30: PhysicalProblem.computeDOFNumbering:input_type -> google.protobuf.Empty
	5,  // 31: DiscreteComputation.getNeumannForces:input_type -> NeumannForcesParams
	18, // 32: DiscreteComputation.getLinearStiffnessMatrix:input_type -> google.protobuf.Empty
	18, // 33: DiscreteComputation.getDualStiffnessMatrix:input_type -> google.protobuf.Empty
	3,  // 34: DOFNumbering.computeNumbering:input_type -> ElementaryMatrices
	6,  // 35: AssemblyMatrixDisplacementReal.addElementaryMatrix:input_type -> ElementaryMatrix
	18, // 36: AssemblyMatrixDisplacementReal.setDOFNumbering:input_type -> google.protobuf.Empty
	18, // 37: AssemblyMatrixDisplacementReal.assemble:input_type -> google.protobuf.Empty
	18, // 38: MumpsSolver.factorize:input_type -> google.protobuf.Empty
	7,  // 39: MumpsSolver.solve:input_type -> FieldOnNodesId
	7,  // 40: FieldOnNodes.printMedFile:input_type -> FieldOnNodesId
	18, // 41: code_aster.init:output_type -> google.protobuf.Empty
	2,  // 42: code_aster.StreamLog:output_type -> LogLine
	18, // 43: code_aster.Mesh:output_type -> google.protobuf.Empty
	18, // 44: code_aster.Model:output_type -> google.protobuf.Empty
	18, // 45: code_aster.MaterialField:output_type -> google.protobuf.Empty
	8,  // 46: code_aster.ImposedDisplacementReal:output_type -> MechanicalLoadReal
	8,  // 47: code_aster.DistributedPressureReal:output_type -> MechanicalLoadReal
	18, // 48: code_aster.PhysicalProblem:output_type -> google.protobuf.Empty
	18, // 49: code_aster.DiscreteComputation:output_type -> google.protobuf.Empty
	18, // 50: code_aster.DOFNumbering:output_type -> google.protobuf.Empty
	18, // 51: code_aster.AssemblyMatrixDisplacementReal:output_type -> google.protobuf.Empty
	18, // 52: code_aster.MumpsSolver:output_type -> google.protobuf.Empty
	18, // 53: code_aster.SimpleFieldOnNodesReal:output_type -> google.protobuf.Empty
	18, // 54: Mesh.readMedFile:output_type -> google.protobuf.Empty
	18, // 55: Model.addModelingOnMesh:output_type -> google.protobuf.Empty
	18, // 56: Model.build:output_type -> google.protobuf.Empty
	18, // 57: MaterialField.addMaterialOnMesh:output_type -> google.protobuf.Empty
	18, // 58: MaterialField.build:output_type -> google.protobuf.Empty
	18, // 59: ImposedDisplacementReal.setValue:output_type -> google.protobuf.Empty
	18, // 60: ImposedDisplacementReal.build:output_type -> google.protobuf.Empty
	18, // 61: DistributedPressureReal.setValue:output_type -> google.protobuf.Empty
	18, // 62: DistributedPressureReal.build:output_type -> google.protobuf.Empty
	18, // 63: PhysicalProblem.addLoad:output_type -> google.protobuf.Empty
	18, // 64: PhysicalProblem.computeDOFNumbering:output_type -> google.protobuf.Empty
	7,  // 65: DiscreteComputation.getNeumannForces:output_type -> FieldOnNodesId
	6,  // 66: DiscreteComputation.getLinearStiffnessMatrix:output_type -> ElementaryMatrix
	6,  // 67: DiscreteComputation.getDualStiffnessMatrix:output_type -> ElementaryMatrix
	18, // 68: DOFNumbering.computeNumbering:output_type -> google.protobuf.Empty
	18, // 69: AssemblyMatrixDisplacementReal.addElementaryMatrix:output_type -> google.protobuf.Empty
	18, // 70: AssemblyMatrixDisplacementReal.setDOFNumbering:output_type -> google.protobuf.Empty
	18, // 71: AssemblyMatrixDisplacementReal.assemble:output_type -> google.protobuf.Empty
	18, // 72: MumpsSolver.factorize:output_type -> google.protobuf.Empty
	7,  // 73: MumpsSolver.solve:output_type -> FieldOnNodesId
	13, // 74: FieldOnNodes.printMedFile:output_type -> MedFile
	41, // [41:75] is the sub-list for method output_type
	7,  // [7:41] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_proto_code_aster_proto_init() }
func file_proto_code_aster_proto_init() {
	if File_proto_code_aster_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_code_aster_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   12,
		},
		GoTypes:           file_proto_code_aster_proto_goTypes,
		DependencyIndexes: file_proto_code_aster_proto_depIdxs,
		EnumInfos:         file_proto_code_aster_proto_enumTypes,
		MessageInfos:      file_proto_code_aster_proto_msgTypes,
	}.Build()
	File_proto_code_aster_proto = out.File
	file_proto_code_aster_proto_rawDesc = nil
	file_proto_code_aster_proto_goTypes = nil
	file_proto_code_aster_proto_depIdxs = nil
}
