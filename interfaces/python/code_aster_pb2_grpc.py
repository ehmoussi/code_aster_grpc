# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from interfaces.python import code_aster_pb2 as interfaces_dot_python_dot_code__aster__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in interfaces/python/code_aster_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class code_asterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init = channel.unary_unary(
                '/code_aster/init',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Mesh = channel.unary_unary(
                '/code_aster/Mesh',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.Model = channel.unary_unary(
                '/code_aster/Model',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.MaterialField = channel.unary_unary(
                '/code_aster/MaterialField',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.ImposedDisplacementReal = channel.unary_unary(
                '/code_aster/ImposedDisplacementReal',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
                _registered_method=True)
        self.DistributedPressureReal = channel.unary_unary(
                '/code_aster/DistributedPressureReal',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
                _registered_method=True)
        self.PhysicalProblem = channel.unary_unary(
                '/code_aster/PhysicalProblem',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DiscreteComputation = channel.unary_unary(
                '/code_aster/DiscreteComputation',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.DOFNumbering = channel.unary_unary(
                '/code_aster/DOFNumbering',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.AssemblyMatrixDisplacementReal = channel.unary_unary(
                '/code_aster/AssemblyMatrixDisplacementReal',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.MumpsSolver = channel.unary_unary(
                '/code_aster/MumpsSolver',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.SimpleFieldOnNodesReal = channel.unary_unary(
                '/code_aster/SimpleFieldOnNodesReal',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class code_asterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mesh(self, request, context):
        """Return the wrapper around the Mesh service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Model(self, request, context):
        """Return the wrapper around the Model service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MaterialField(self, request, context):
        """Return the wrapper around the MaterialField service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImposedDisplacementReal(self, request, context):
        """Return the wrapper around the ImposedDisplacementReal service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DistributedPressureReal(self, request, context):
        """Return the wrapper around the DistributedPressureReal service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PhysicalProblem(self, request, context):
        """Return the wrapper around the PhysicalProblem service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DiscreteComputation(self, request, context):
        """Return the wrapper around the DiscreteComputation service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DOFNumbering(self, request, context):
        """Return the wrapper around the DOFNumbering service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AssemblyMatrixDisplacementReal(self, request, context):
        """Return the wrapper around the AssemblyMatrixDisplacementReal service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MumpsSolver(self, request, context):
        """Return the wrapper around the MumpsSolver service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SimpleFieldOnNodesReal(self, request, context):
        """TODO: after this Not implemented yet
        Return the wrapper around the SimpleFieldOnNodesReal service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_code_asterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init': grpc.unary_unary_rpc_method_handler(
                    servicer.init,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Mesh': grpc.unary_unary_rpc_method_handler(
                    servicer.Mesh,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'Model': grpc.unary_unary_rpc_method_handler(
                    servicer.Model,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'MaterialField': grpc.unary_unary_rpc_method_handler(
                    servicer.MaterialField,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ImposedDisplacementReal': grpc.unary_unary_rpc_method_handler(
                    servicer.ImposedDisplacementReal,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
            ),
            'DistributedPressureReal': grpc.unary_unary_rpc_method_handler(
                    servicer.DistributedPressureReal,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
            ),
            'PhysicalProblem': grpc.unary_unary_rpc_method_handler(
                    servicer.PhysicalProblem,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DiscreteComputation': grpc.unary_unary_rpc_method_handler(
                    servicer.DiscreteComputation,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DOFNumbering': grpc.unary_unary_rpc_method_handler(
                    servicer.DOFNumbering,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'AssemblyMatrixDisplacementReal': grpc.unary_unary_rpc_method_handler(
                    servicer.AssemblyMatrixDisplacementReal,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'MumpsSolver': grpc.unary_unary_rpc_method_handler(
                    servicer.MumpsSolver,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'SimpleFieldOnNodesReal': grpc.unary_unary_rpc_method_handler(
                    servicer.SimpleFieldOnNodesReal,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code_aster', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('code_aster', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class code_aster(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/init',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mesh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/Mesh',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/Model',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MaterialField(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/MaterialField',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ImposedDisplacementReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/ImposedDisplacementReal',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DistributedPressureReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/DistributedPressureReal',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PhysicalProblem(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/PhysicalProblem',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DiscreteComputation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/DiscreteComputation',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DOFNumbering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/DOFNumbering',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AssemblyMatrixDisplacementReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/AssemblyMatrixDisplacementReal',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MumpsSolver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/MumpsSolver',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SimpleFieldOnNodesReal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/code_aster/SimpleFieldOnNodesReal',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MeshStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.readMedFile = channel.unary_unary(
                '/Mesh/readMedFile',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.MedFile.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class MeshServicer(object):
    """Missing associated documentation comment in .proto file."""

    def readMedFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MeshServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'readMedFile': grpc.unary_unary_rpc_method_handler(
                    servicer.readMedFile,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.MedFile.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Mesh', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Mesh', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Mesh(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def readMedFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Mesh/readMedFile',
            interfaces_dot_python_dot_code__aster__pb2.MedFile.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addModelingOnMesh = channel.unary_unary(
                '/Model/addModelingOnMesh',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.Modeling.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.build = channel.unary_unary(
                '/Model/build',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addModelingOnMesh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def build(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addModelingOnMesh': grpc.unary_unary_rpc_method_handler(
                    servicer.addModelingOnMesh,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.Modeling.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'build': grpc.unary_unary_rpc_method_handler(
                    servicer.build,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Model', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addModelingOnMesh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Model/addModelingOnMesh',
            interfaces_dot_python_dot_code__aster__pb2.Modeling.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Model/build',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MaterialFieldStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addMaterialOnMesh = channel.unary_unary(
                '/MaterialField/addMaterialOnMesh',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.Material.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.build = channel.unary_unary(
                '/MaterialField/build',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class MaterialFieldServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addMaterialOnMesh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def build(self, request, context):
        """TODO: make this rpc
        rpc addMaterialOnGroupOfCells(Material) returns (google.protobuf.Empty) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaterialFieldServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addMaterialOnMesh': grpc.unary_unary_rpc_method_handler(
                    servicer.addMaterialOnMesh,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.Material.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'build': grpc.unary_unary_rpc_method_handler(
                    servicer.build,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MaterialField', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MaterialField', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MaterialField(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addMaterialOnMesh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MaterialField/addMaterialOnMesh',
            interfaces_dot_python_dot_code__aster__pb2.Material.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MaterialField/build',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ImposedDisplacementRealStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setValue = channel.unary_unary(
                '/ImposedDisplacementReal/setValue',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.DisplacementRealWithLoadId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.build = channel.unary_unary(
                '/ImposedDisplacementReal/build',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class ImposedDisplacementRealServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def build(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ImposedDisplacementRealServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setValue': grpc.unary_unary_rpc_method_handler(
                    servicer.setValue,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.DisplacementRealWithLoadId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'build': grpc.unary_unary_rpc_method_handler(
                    servicer.build,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ImposedDisplacementReal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('ImposedDisplacementReal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ImposedDisplacementReal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ImposedDisplacementReal/setValue',
            interfaces_dot_python_dot_code__aster__pb2.DisplacementRealWithLoadId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/ImposedDisplacementReal/build',
            interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DistributedPressureRealStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setValue = channel.unary_unary(
                '/DistributedPressureReal/setValue',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.PressureRealWithLoadId.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.build = channel.unary_unary(
                '/DistributedPressureReal/build',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class DistributedPressureRealServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setValue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def build(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DistributedPressureRealServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setValue': grpc.unary_unary_rpc_method_handler(
                    servicer.setValue,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.PressureRealWithLoadId.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'build': grpc.unary_unary_rpc_method_handler(
                    servicer.build,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DistributedPressureReal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DistributedPressureReal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DistributedPressureReal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DistributedPressureReal/setValue',
            interfaces_dot_python_dot_code__aster__pb2.PressureRealWithLoadId.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def build(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DistributedPressureReal/build',
            interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class PhysicalProblemStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addLoad = channel.unary_unary(
                '/PhysicalProblem/addLoad',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.computeDOFNumbering = channel.unary_unary(
                '/PhysicalProblem/computeDOFNumbering',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class PhysicalProblemServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addLoad(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def computeDOFNumbering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PhysicalProblemServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.addLoad,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'computeDOFNumbering': grpc.unary_unary_rpc_method_handler(
                    servicer.computeDOFNumbering,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'PhysicalProblem', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('PhysicalProblem', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PhysicalProblem(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PhysicalProblem/addLoad',
            interfaces_dot_python_dot_code__aster__pb2.MechanicalLoadReal.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def computeDOFNumbering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/PhysicalProblem/computeDOFNumbering',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DiscreteComputationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getNeumannForces = channel.unary_unary(
                '/DiscreteComputation/getNeumannForces',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.NeumannForcesParams.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
                _registered_method=True)
        self.getLinearStiffnessMatrix = channel.unary_unary(
                '/DiscreteComputation/getLinearStiffnessMatrix',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.FromString,
                _registered_method=True)
        self.getDualStiffnessMatrix = channel.unary_unary(
                '/DiscreteComputation/getDualStiffnessMatrix',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.FromString,
                _registered_method=True)


class DiscreteComputationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getNeumannForces(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLinearStiffnessMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getDualStiffnessMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DiscreteComputationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getNeumannForces': grpc.unary_unary_rpc_method_handler(
                    servicer.getNeumannForces,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.NeumannForcesParams.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
            ),
            'getLinearStiffnessMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.getLinearStiffnessMatrix,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.SerializeToString,
            ),
            'getDualStiffnessMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.getDualStiffnessMatrix,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DiscreteComputation', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DiscreteComputation', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DiscreteComputation(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getNeumannForces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DiscreteComputation/getNeumannForces',
            interfaces_dot_python_dot_code__aster__pb2.NeumannForcesParams.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getLinearStiffnessMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DiscreteComputation/getLinearStiffnessMatrix',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getDualStiffnessMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DiscreteComputation/getDualStiffnessMatrix',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class DOFNumberingStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.computeNumbering = channel.unary_unary(
                '/DOFNumbering/computeNumbering',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrices.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class DOFNumberingServicer(object):
    """Missing associated documentation comment in .proto file."""

    def computeNumbering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DOFNumberingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'computeNumbering': grpc.unary_unary_rpc_method_handler(
                    servicer.computeNumbering,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrices.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DOFNumbering', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('DOFNumbering', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DOFNumbering(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def computeNumbering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/DOFNumbering/computeNumbering',
            interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrices.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AssemblyMatrixDisplacementRealStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addElementaryMatrix = channel.unary_unary(
                '/AssemblyMatrixDisplacementReal/addElementaryMatrix',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.setDOFNumbering = channel.unary_unary(
                '/AssemblyMatrixDisplacementReal/setDOFNumbering',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.assemble = channel.unary_unary(
                '/AssemblyMatrixDisplacementReal/assemble',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)


class AssemblyMatrixDisplacementRealServicer(object):
    """Missing associated documentation comment in .proto file."""

    def addElementaryMatrix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setDOFNumbering(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def assemble(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AssemblyMatrixDisplacementRealServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addElementaryMatrix': grpc.unary_unary_rpc_method_handler(
                    servicer.addElementaryMatrix,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'setDOFNumbering': grpc.unary_unary_rpc_method_handler(
                    servicer.setDOFNumbering,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'assemble': grpc.unary_unary_rpc_method_handler(
                    servicer.assemble,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AssemblyMatrixDisplacementReal', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('AssemblyMatrixDisplacementReal', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AssemblyMatrixDisplacementReal(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def addElementaryMatrix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AssemblyMatrixDisplacementReal/addElementaryMatrix',
            interfaces_dot_python_dot_code__aster__pb2.ElementaryMatrix.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def setDOFNumbering(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AssemblyMatrixDisplacementReal/setDOFNumbering',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def assemble(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/AssemblyMatrixDisplacementReal/assemble',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class MumpsSolverStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.factorize = channel.unary_unary(
                '/MumpsSolver/factorize',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                _registered_method=True)
        self.solve = channel.unary_unary(
                '/MumpsSolver/solve',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
                _registered_method=True)


class MumpsSolverServicer(object):
    """Missing associated documentation comment in .proto file."""

    def factorize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def solve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MumpsSolverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'factorize': grpc.unary_unary_rpc_method_handler(
                    servicer.factorize,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'solve': grpc.unary_unary_rpc_method_handler(
                    servicer.solve,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MumpsSolver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('MumpsSolver', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MumpsSolver(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def factorize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MumpsSolver/factorize',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def solve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/MumpsSolver/solve',
            interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FieldOnNodesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.printMedFile = channel.unary_unary(
                '/FieldOnNodes/printMedFile',
                request_serializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
                response_deserializer=interfaces_dot_python_dot_code__aster__pb2.MedFile.FromString,
                _registered_method=True)


class FieldOnNodesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def printMedFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FieldOnNodesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'printMedFile': grpc.unary_unary_rpc_method_handler(
                    servicer.printMedFile,
                    request_deserializer=interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.FromString,
                    response_serializer=interfaces_dot_python_dot_code__aster__pb2.MedFile.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'FieldOnNodes', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('FieldOnNodes', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FieldOnNodes(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def printMedFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/FieldOnNodes/printMedFile',
            interfaces_dot_python_dot_code__aster__pb2.FieldOnNodesId.SerializeToString,
            interfaces_dot_python_dot_code__aster__pb2.MedFile.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
